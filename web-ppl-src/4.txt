<ref *1> Object [global] {
  global: [Circular *1],
  clearImmediate: [Function: clearImmediate],
  setImmediate: [Function: setImmediate] {
    [Symbol(nodejs.util.promisify.custom)]: [Getter]
  },
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout] {
    [Symbol(nodejs.util.promisify.custom)]: [Getter]
  },
  queueMicrotask: [Function: queueMicrotask],
  structuredClone: [Function: structuredClone],
  atob: [Getter/Setter],
  btoa: [Getter/Setter],
  performance: [Getter/Setter],
  fetch: [Function: fetch],
  navigator: [Getter],
  crypto: [Getter],
  _top: [Circular *1],
  factor: [Function (anonymous)],
  sample: [Function (anonymous)],
  sampleWithFactor: [Function (anonymous)],
  observe: [Function (anonymous)],
  incrementalize: [Function (anonymous)],
  query: Query { table: {} },
  _: <ref *2> [Function: lodash] {
    templateSettings: {
      escape: /<%-([\s\S]+?)%>/g,
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      variable: '',
      imports: [Object]
    },
    after: [Function: after],
    ary: [Function: ary],
    assign: [Function (anonymous)],
    assignIn: [Function (anonymous)],
    assignInWith: [Function (anonymous)],
    assignWith: [Function (anonymous)],
    at: [Function (anonymous)],
    before: [Function: before],
    bind: [Function (anonymous)] { placeholder: [Circular *2] },
    bindAll: [Function (anonymous)],
    bindKey: [Function (anonymous)] { placeholder: [Circular *2] },
    castArray: [Function: castArray],
    chain: [Function: chain],
    chunk: [Function: chunk],
    compact: [Function: compact],
    concat: [Function: concat],
    cond: [Function: cond],
    conforms: [Function: conforms],
    constant: [Function: constant],
    countBy: [Function (anonymous)],
    create: [Function: create],
    curry: [Function: curry] { placeholder: [Circular *2] },
    curryRight: [Function: curryRight] { placeholder: [Circular *2] },
    debounce: [Function: debounce],
    defaults: [Function (anonymous)],
    defaultsDeep: [Function (anonymous)],
    defer: [Function (anonymous)],
    delay: [Function (anonymous)],
    difference: [Function (anonymous)],
    differenceBy: [Function (anonymous)],
    differenceWith: [Function (anonymous)],
    drop: [Function: drop],
    dropRight: [Function: dropRight],
    dropRightWhile: [Function: dropRightWhile],
    dropWhile: [Function: dropWhile],
    fill: [Function: fill],
    filter: [Function: filter],
    flatMap: [Function: flatMap],
    flatMapDeep: [Function: flatMapDeep],
    flatMapDepth: [Function: flatMapDepth],
    flatten: [Function: flatten],
    flattenDeep: [Function: flattenDeep],
    flattenDepth: [Function: flattenDepth],
    flip: [Function: flip],
    flow: [Function (anonymous)],
    flowRight: [Function (anonymous)],
    fromPairs: [Function: fromPairs],
    functions: [Function: functions],
    functionsIn: [Function: functionsIn],
    groupBy: [Function (anonymous)],
    initial: [Function: initial],
    intersection: [Function (anonymous)],
    intersectionBy: [Function (anonymous)],
    intersectionWith: [Function (anonymous)],
    invert: [Function (anonymous)],
    invertBy: [Function (anonymous)],
    invokeMap: [Function (anonymous)],
    iteratee: [Function: iteratee],
    keyBy: [Function (anonymous)],
    keys: [Function: keys],
    keysIn: [Function: keysIn],
    map: [Function: map],
    mapKeys: [Function: mapKeys],
    mapValues: [Function: mapValues],
    matches: [Function: matches],
    matchesProperty: [Function: matchesProperty],
    memoize: [Function: memoize] { Cache: [Function: MapCache] },
    merge: [Function (anonymous)],
    mergeWith: [Function (anonymous)],
    method: [Function (anonymous)],
    methodOf: [Function (anonymous)],
    mixin: [Function: mixin],
    negate: [Function: negate],
    nthArg: [Function: nthArg],
    omit: [Function (anonymous)],
    omitBy: [Function: omitBy],
    once: [Function: once],
    orderBy: [Function: orderBy],
    over: [Function (anonymous)],
    overArgs: [Function (anonymous)],
    overEvery: [Function (anonymous)],
    overSome: [Function (anonymous)],
    partial: [Function (anonymous)] { placeholder: [Circular *2] },
    partialRight: [Function (anonymous)] { placeholder: [Circular *2] },
    partition: [Function (anonymous)],
    pick: [Function (anonymous)],
    pickBy: [Function: pickBy],
    property: [Function: property],
    propertyOf: [Function: propertyOf],
    pull: [Function (anonymous)],
    pullAll: [Function: pullAll],
    pullAllBy: [Function: pullAllBy],
    pullAllWith: [Function: pullAllWith],
    pullAt: [Function (anonymous)],
    range: [Function (anonymous)],
    rangeRight: [Function (anonymous)],
    rearg: [Function (anonymous)],
    reject: [Function: reject],
    remove: [Function: remove],
    rest: [Function: rest],
    reverse: [Function: reverse],
    sampleSize: [Function: sampleSize],
    set: [Function: set],
    setWith: [Function: setWith],
    shuffle: [Function: shuffle],
    slice: [Function: slice],
    sortBy: [Function (anonymous)],
    sortedUniq: [Function: sortedUniq],
    sortedUniqBy: [Function: sortedUniqBy],
    split: [Function: split],
    spread: [Function: spread],
    tail: [Function: tail],
    take: [Function: take],
    takeRight: [Function: takeRight],
    takeRightWhile: [Function: takeRightWhile],
    takeWhile: [Function: takeWhile],
    tap: [Function: tap],
    throttle: [Function: throttle],
    thru: [Function: thru],
    toArray: [Function: toArray],
    toPairs: [Function (anonymous)],
    toPairsIn: [Function (anonymous)],
    toPath: [Function: toPath],
    toPlainObject: [Function: toPlainObject],
    transform: [Function: transform],
    unary: [Function: unary],
    union: [Function (anonymous)],
    unionBy: [Function (anonymous)],
    unionWith: [Function (anonymous)],
    uniq: [Function: uniq],
    uniqBy: [Function: uniqBy],
    uniqWith: [Function: uniqWith],
    unset: [Function: unset],
    unzip: [Function: unzip],
    unzipWith: [Function: unzipWith],
    update: [Function: update],
    updateWith: [Function: updateWith],
    values: [Function: values],
    valuesIn: [Function: valuesIn],
    without: [Function (anonymous)],
    words: [Function: words],
    wrap: [Function: wrap],
    xor: [Function (anonymous)],
    xorBy: [Function (anonymous)],
    xorWith: [Function (anonymous)],
    zip: [Function (anonymous)],
    zipObject: [Function: zipObject],
    zipObjectDeep: [Function: zipObjectDeep],
    zipWith: [Function (anonymous)],
    entries: [Function (anonymous)],
    entriesIn: [Function (anonymous)],
    extend: [Function (anonymous)],
    extendWith: [Function (anonymous)],
    add: [Function (anonymous)],
    attempt: [Function (anonymous)],
    camelCase: [Function (anonymous)],
    capitalize: [Function: capitalize],
    ceil: [Function (anonymous)],
    clamp: [Function: clamp],
    clone: [Function: clone],
    cloneDeep: [Function: cloneDeep],
    cloneDeepWith: [Function: cloneDeepWith],
    cloneWith: [Function: cloneWith],
    conformsTo: [Function: conformsTo],
    deburr: [Function: deburr],
    defaultTo: [Function: defaultTo],
    divide: [Function (anonymous)],
    endsWith: [Function: endsWith],
    eq: [Function: eq],
    escape: [Function: escape],
    escapeRegExp: [Function: escapeRegExp],
    every: [Function: every],
    find: [Function (anonymous)],
    findIndex: [Function: findIndex],
    findKey: [Function: findKey],
    findLast: [Function (anonymous)],
    findLastIndex: [Function: findLastIndex],
    findLastKey: [Function: findLastKey],
    floor: [Function (anonymous)],
    forEach: [Function: forEach],
    forEachRight: [Function: forEachRight],
    forIn: [Function: forIn],
    forInRight: [Function: forInRight],
    forOwn: [Function: forOwn],
    forOwnRight: [Function: forOwnRight],
    get: [Function: get],
    gt: [Function (anonymous)],
    gte: [Function (anonymous)],
    has: [Function: has],
    hasIn: [Function: hasIn],
    head: [Function: head],
    identity: [Function: identity],
    includes: [Function: includes],
    indexOf: [Function: indexOf],
    inRange: [Function: inRange],
    invoke: [Function (anonymous)],
    isArguments: [Function: baseIsArguments],
    isArray: [Function: isArray],
    isArrayBuffer: [Function (anonymous)],
    isArrayLike: [Function: isArrayLike],
    isArrayLikeObject: [Function: isArrayLikeObject],
    isBoolean: [Function: isBoolean],
    isBuffer: [Function: isBuffer],
    isDate: [Function (anonymous)],
    isElement: [Function: isElement],
    isEmpty: [Function: isEmpty],
    isEqual: [Function: isEqual],
    isEqualWith: [Function: isEqualWith],
    isError: [Function: isError],
    isFinite: [Function: isFinite],
    isFunction: [Function: isFunction],
    isInteger: [Function: isInteger],
    isLength: [Function: isLength],
    isMap: [Function (anonymous)],
    isMatch: [Function: isMatch],
    isMatchWith: [Function: isMatchWith],
    isNaN: [Function: isNaN],
    isNative: [Function: isNative],
    isNil: [Function: isNil],
    isNull: [Function: isNull],
    isNumber: [Function: isNumber],
    isObject: [Function: isObject],
    isObjectLike: [Function: isObjectLike],
    isPlainObject: [Function: isPlainObject],
    isRegExp: [Function (anonymous)],
    isSafeInteger: [Function: isSafeInteger],
    isSet: [Function (anonymous)],
    isString: [Function: isString],
    isSymbol: [Function: isSymbol],
    isTypedArray: [Function (anonymous)],
    isUndefined: [Function: isUndefined],
    isWeakMap: [Function: isWeakMap],
    isWeakSet: [Function: isWeakSet],
    join: [Function: join],
    kebabCase: [Function (anonymous)],
    last: [Function: last],
    lastIndexOf: [Function: lastIndexOf],
    lowerCase: [Function (anonymous)],
    lowerFirst: [Function (anonymous)],
    lt: [Function (anonymous)],
    lte: [Function (anonymous)],
    max: [Function: max],
    maxBy: [Function: maxBy],
    mean: [Function: mean],
    meanBy: [Function: meanBy],
    min: [Function: min],
    minBy: [Function: minBy],
    stubArray: [Function: stubArray],
    stubFalse: [Function: stubFalse],
    stubObject: [Function: stubObject],
    stubString: [Function: stubString],
    stubTrue: [Function: stubTrue],
    multiply: [Function (anonymous)],
    nth: [Function: nth],
    noConflict: [Function: noConflict],
    noop: [Function: noop],
    now: [Function (anonymous)],
    pad: [Function: pad],
    padEnd: [Function: padEnd],
    padStart: [Function: padStart],
    parseInt: [Function: parseInt],
    random: [Function: random],
    reduce: [Function: reduce],
    reduceRight: [Function: reduceRight],
    repeat: [Function: repeat],
    replace: [Function: replace],
    result: [Function: result],
    round: [Function (anonymous)],
    runInContext: [Function: runInContext],
    sample: [Function: sample],
    size: [Function: size],
    snakeCase: [Function (anonymous)],
    some: [Function: some],
    sortedIndex: [Function: sortedIndex],
    sortedIndexBy: [Function: sortedIndexBy],
    sortedIndexOf: [Function: sortedIndexOf],
    sortedLastIndex: [Function: sortedLastIndex],
    sortedLastIndexBy: [Function: sortedLastIndexBy],
    sortedLastIndexOf: [Function: sortedLastIndexOf],
    startCase: [Function (anonymous)],
    startsWith: [Function: startsWith],
    subtract: [Function (anonymous)],
    sum: [Function: sum],
    sumBy: [Function: sumBy],
    template: [Function: template],
    times: [Function: times],
    toFinite: [Function: toFinite],
    toInteger: [Function: toInteger],
    toLength: [Function: toLength],
    toLower: [Function: toLower],
    toNumber: [Function: toNumber],
    toSafeInteger: [Function: toSafeInteger],
    toString: [Function: toString],
    toUpper: [Function: toUpper],
    trim: [Function: trim],
    trimEnd: [Function: trimEnd],
    trimStart: [Function: trimStart],
    truncate: [Function: truncate],
    unescape: [Function: unescape],
    uniqueId: [Function: uniqueId],
    upperCase: [Function (anonymous)],
    upperFirst: [Function (anonymous)],
    each: [Function: forEach],
    eachRight: [Function: forEachRight],
    first: [Function: head],
    VERSION: '4.17.21',
    _: [Circular *2]
  },
  util: {
    trampolineRunners: { web: [Function: web], cli: [Function: cli] },
    random: [Function: random],
    seedRNG: [Function: seedRNG],
    resetRNG: [Function: resetRNG],
    assertValidRandomSeed: [Function: assertValidRandomSeed],
    cpsForEach: [Function: cpsForEach],
    cpsLoop: [Function: cpsLoop],
    cpsIterate: [Function: cpsIterate],
    histExpectation: [Function: histExpectation],
    histStd: [Function: histStd],
    histsApproximatelyEqual: [Function: histsApproximatelyEqual],
    gensym: [Function (anonymous)],
    deleteIndex: [Function: deleteIndex],
    makeGensym: [Function: makeGensym],
    prettyJSON: [Function: prettyJSON],
    runningInBrowser: [Function: runningInBrowser],
    mergeDefaults: [Function: mergeDefaults],
    getValAndOpts: [Function: getValAndOpts],
    sum: [Function: _sum],
    logsumexp: [Function: _logsumexp],
    asArray: [Function: asArray],
    serialize: [Function: serialize],
    deserialize: [Function: deserialize],
    timeif: [Function: timeif],
    warn: [Function: warn],
    resetWarnings: [Function: resetWarnings],
    error: [Function: error],
    jsthrow: [Function: jsthrow],
    isInteger: [Function: isInteger],
    isObject: [Function: isObject],
    isTensor: [Function: isTensor],
    isVector: [Function: isVector],
    isMatrix: [Function: isMatrix],
    tensorEqDim0: [Function: tensorEqDim0],
    tensorEqDims: [Function: tensorEqDims],
    idMatrix: [Function: idMatrix],
    oneHot: [Function: oneHot],
    relativizeAddress: [Function: relativizeAddress]
  },
  assert: <ref *3> [Function: ok] {
    fail: [Function: fail],
    AssertionError: [class AssertionError extends Error],
    ok: [Circular *3],
    equal: [Function: equal],
    notEqual: [Function: notEqual],
    deepEqual: [Function: deepEqual],
    notDeepEqual: [Function: notDeepEqual],
    deepStrictEqual: [Function: deepStrictEqual],
    notDeepStrictEqual: [Function: notDeepStrictEqual],
    strictEqual: [Function: strictEqual],
    notStrictEqual: [Function: notStrictEqual],
    throws: [Function: throws],
    rejects: [AsyncFunction: rejects],
    doesNotThrow: [Function: doesNotThrow],
    doesNotReject: [AsyncFunction: doesNotReject],
    ifError: [Function: ifError],
    match: [Function: match],
    doesNotMatch: [Function: doesNotMatch],
    CallTracker: [Function: deprecated],
    strict: <ref *4> [Function: strict] {
      fail: [Function: fail],
      AssertionError: [class AssertionError extends Error],
      ok: [Circular *3],
      equal: [Function: strictEqual],
      notEqual: [Function: notStrictEqual],
      deepEqual: [Function: deepStrictEqual],
      notDeepEqual: [Function: notDeepStrictEqual],
      deepStrictEqual: [Function: deepStrictEqual],
      notDeepStrictEqual: [Function: notDeepStrictEqual],
      strictEqual: [Function: strictEqual],
      notStrictEqual: [Function: notStrictEqual],
      throws: [Function: throws],
      rejects: [AsyncFunction: rejects],
      doesNotThrow: [Function: doesNotThrow],
      doesNotReject: [AsyncFunction: doesNotReject],
      ifError: [Function: ifError],
      match: [Function: match],
      doesNotMatch: [Function: doesNotMatch],
      CallTracker: [Function: deprecated],
      strict: [Circular *4]
    }
  },
  ad: {
    lift: [Function: lift],
    isLifted: [Function: isLifted],
    value: [Function: value],
    derivative: [Function: derivative],
    params: [Function (anonymous)],
    newUnaryFunction: [Function: newUnaryFunction],
    newBinaryFunction: [Function: newBinaryFunction],
    newFunction: [Function: newFunction],
    naryGetParents: [Function: naryGetParents],
    liftUnaryFunction: [Function: liftUnaryFunction],
    liftBinaryFunction: [Function: liftBinaryFunction],
    scalar: {
      neg: [Function (anonymous)],
      add: [Function (anonymous)],
      sub: [Function (anonymous)],
      mul: [Function (anonymous)],
      div: [Function (anonymous)],
      floor: [Function (anonymous)],
      ceil: [Function (anonymous)],
      round: [Function (anonymous)],
      sqrt: [Function (anonymous)],
      exp: [Function (anonymous)],
      log: [Function (anonymous)],
      abs: [Function (anonymous)],
      sin: [Function (anonymous)],
      cos: [Function (anonymous)],
      tan: [Function (anonymous)],
      asin: [Function (anonymous)],
      acos: [Function (anonymous)],
      atan: [Function (anonymous)],
      sinh: [Function (anonymous)],
      cosh: [Function (anonymous)],
      tanh: [Function (anonymous)],
      asinh: [Function (anonymous)],
      acosh: [Function (anonymous)],
      atanh: [Function (anonymous)],
      sigmoid: [Function (anonymous)],
      pow: [Function (anonymous)],
      min: [Function (anonymous)],
      max: [Function (anonymous)],
      atan2: [Function (anonymous)],
      isNaN: [Function (anonymous)],
      isFinite: [Function (anonymous)],
      cbrt: [Function: cbrt],
      expm1: [Function: expm1],
      clz32: [Function: clz32],
      fround: [Function: fround],
      hypot: [Function: hypot],
      imul: [Function: imul],
      log1p: [Function: log1p],
      log2: [Function: log2],
      log10: [Function: log10],
      random: [Function: random],
      sign: [Function: sign],
      trunc: [Function: trunc],
      E: 2.718281828459045,
      LN10: 2.302585092994046,
      LN2: 0.6931471805599453,
      LOG10E: 0.4342944819032518,
      LOG2E: 1.4426950408889634,
      PI: 3.141592653589793,
      SQRT1_2: 0.7071067811865476,
      SQRT2: 1.4142135623730951,
      seedrandom: [Function],
      eq: [Function (anonymous)],
      neq: [Function (anonymous)],
      peq: [Function (anonymous)],
      pneq: [Function (anonymous)],
      gt: [Function (anonymous)],
      lt: [Function (anonymous)],
      geq: [Function (anonymous)],
      leq: [Function (anonymous)],
      sum: [Function (anonymous)],
      logGamma: [Function (anonymous)],
      plus: [Function (anonymous)]
    },
    tensor: {
      neg: [Function (anonymous)],
      add: [Function (anonymous)],
      sub: [Function (anonymous)],
      mul: [Function (anonymous)],
      div: [Function (anonymous)],
      floor: [Function (anonymous)],
      ceil: [Function (anonymous)],
      round: [Function (anonymous)],
      sqrt: [Function (anonymous)],
      exp: [Function (anonymous)],
      log: [Function (anonymous)],
      abs: [Function (anonymous)],
      sin: [Function (anonymous)],
      cos: [Function (anonymous)],
      tan: [Function (anonymous)],
      asin: [Function (anonymous)],
      acos: [Function (anonymous)],
      atan: [Function (anonymous)],
      sinh: [Function (anonymous)],
      cosh: [Function (anonymous)],
      tanh: [Function (anonymous)],
      asinh: [Function (anonymous)],
      acosh: [Function (anonymous)],
      atanh: [Function (anonymous)],
      sigmoid: [Function (anonymous)],
      pow: [Function (anonymous)],
      min: [Function (anonymous)],
      max: [Function (anonymous)],
      atan2: [Function (anonymous)],
      isNaN: [Function (anonymous)],
      isFinite: [Function (anonymous)],
      transpose: [Function (anonymous)],
      diagonal: [Function (anonymous)],
      inverse: [Function (anonymous)],
      determinant: [Function (anonymous)],
      dot: [Function (anonymous)],
      cholesky: [Function (anonymous)],
      sumreduce: [Function (anonymous)],
      allreduce: [Function (anonymous)],
      anyreduce: [Function (anonymous)],
      get: [Function (anonymous)],
      toScalars: [Function (anonymous)],
      range: [Function (anonymous)],
      split: [Function (anonymous)],
      fromScalars: [Function (anonymous)],
      concat: [Function (anonymous)],
      reshape: [Function (anonymous)],
      softmax: [Function (anonymous)],
      logGamma: [Function (anonymous)],
      __Tensor: [Function: Tensor]
    },
    valueRec: [Function: valueRec]
  },
  nn: {
    Network: [Function: Network] {
      deserializers: [Object],
      deserializeJSON: [Function (anonymous)]
    },
    deserializeJSON: [Function (anonymous)],
    lift: [Function: lift],
    partialeval: [Function: partialeval],
    compound: [Function: compound],
    ast: { input: [Function: input], compile: [Function: compile] },
    sequence: [Function: sequence],
    neg: Network {
      name: 'neg',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    add: Network {
      name: 'add',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    sub: Network {
      name: 'sub',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    mul: Network {
      name: 'mul',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    div: Network {
      name: 'div',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    floor: Network {
      name: 'floor',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    ceil: Network {
      name: 'ceil',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    round: Network {
      name: 'round',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    sqrt: Network {
      name: 'sqrt',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    exp: Network {
      name: 'exp',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    log: Network {
      name: 'log',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    abs: Network {
      name: 'abs',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    sin: Network {
      name: 'sin',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    cos: Network {
      name: 'cos',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    tan: Network {
      name: 'tan',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    asin: Network {
      name: 'asin',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    acos: Network {
      name: 'acos',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    atan: Network {
      name: 'atan',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    sinh: Network {
      name: 'sinh',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    cosh: Network {
      name: 'cosh',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    tanh: Network {
      name: 'tanh',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    asinh: Network {
      name: 'asinh',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    acosh: Network {
      name: 'acosh',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    atanh: Network {
      name: 'atanh',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    sigmoid: Network {
      name: 'sigmoid',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    pow: Network {
      name: 'pow',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    min: Network {
      name: 'min',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    max: Network {
      name: 'max',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    atan2: Network {
      name: 'atan2',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    isNaN: Network {
      name: 'isNaN',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    isFinite: Network {
      name: 'isFinite',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    transpose: Network {
      name: 'transpose',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    diagonal: Network {
      name: 'diagonal',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    inverse: Network {
      name: 'inverse',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    determinant: Network {
      name: 'determinant',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    dot: Network {
      name: 'dot',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    cholesky: Network {
      name: 'cholesky',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    sumreduce: Network {
      name: 'sumreduce',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    allreduce: Network {
      name: 'allreduce',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    anyreduce: Network {
      name: 'anyreduce',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    get: Network {
      name: 'get',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    toScalars: Network {
      name: 'toScalars',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    range: [Function: netCreateFn],
    split: [Function: netCreateFn],
    fromScalars: Network {
      name: 'fromScalars',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    concat: Network {
      name: 'concat',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    reshape: [Function: netCreateFn],
    softmax: Network {
      name: 'softmax',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    logGamma: Network {
      name: 'logGamma',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    __Tensor: Network {
      name: '__Tensor',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function: Tensor],
      serializeJSON: [Function (anonymous)]
    },
    linear: [Function: linear],
    layerwiseLinear: [Function: layerwiseLinear],
    convolution: [Function: convolution],
    convolve: [Function (anonymous)],
    maxpool: [Function: maxpool],
    minpool: [Function: minpool],
    meanpool: [Function: meanpool],
    relu: Network {
      name: 'relu',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    sigmoidCentered: Network {
      name: 'liftedNetwork',
      isTraining: false,
      paramGetters: [],
      paramSetters: [],
      eval: [Function (anonymous)],
      serializeJSON: [Function (anonymous)]
    },
    mlp: [Function: mlp],
    constantparams: [Function: constantparams]
  },
  T: {
    neg: [Function (anonymous)],
    add: [Function (anonymous)],
    sub: [Function (anonymous)],
    mul: [Function (anonymous)],
    div: [Function (anonymous)],
    floor: [Function (anonymous)],
    ceil: [Function (anonymous)],
    round: [Function (anonymous)],
    sqrt: [Function (anonymous)],
    exp: [Function (anonymous)],
    log: [Function (anonymous)],
    abs: [Function (anonymous)],
    sin: [Function (anonymous)],
    cos: [Function (anonymous)],
    tan: [Function (anonymous)],
    asin: [Function (anonymous)],
    acos: [Function (anonymous)],
    atan: [Function (anonymous)],
    sinh: [Function (anonymous)],
    cosh: [Function (anonymous)],
    tanh: [Function (anonymous)],
    asinh: [Function (anonymous)],
    acosh: [Function (anonymous)],
    atanh: [Function (anonymous)],
    sigmoid: [Function (anonymous)],
    pow: [Function (anonymous)],
    min: [Function (anonymous)],
    max: [Function (anonymous)],
    atan2: [Function (anonymous)],
    isNaN: [Function (anonymous)],
    isFinite: [Function (anonymous)],
    transpose: [Function (anonymous)],
    diagonal: [Function (anonymous)],
    inverse: [Function (anonymous)],
    determinant: [Function (anonymous)],
    dot: [Function (anonymous)],
    cholesky: [Function (anonymous)],
    sumreduce: [Function (anonymous)],
    allreduce: [Function (anonymous)],
    anyreduce: [Function (anonymous)],
    get: [Function (anonymous)],
    toScalars: [Function (anonymous)],
    range: [Function (anonymous)],
    split: [Function (anonymous)],
    fromScalars: [Function (anonymous)],
    concat: [Function (anonymous)],
    reshape: [Function (anonymous)],
    softmax: [Function (anonymous)],
    logGamma: [Function (anonymous)],
    __Tensor: [Function: Tensor]
  },
  dists: {
    metadata: [Function: metadata],
    isDist: [Function: isDist],
    clone: [Function: clone],
    serialize: [Function: serialize],
    deserialize: [Function: deserialize],
    Bernoulli: [Function: dist],
    Beta: [Function: dist],
    Binomial: [Function: dist],
    Categorical: [Function: dist],
    Cauchy: [Function: dist],
    Delta: [Function: dist],
    DiagCovGaussian: [Function: dist],
    Dirichlet: [Function: dist],
    Discrete: [Function: dist],
    Exponential: [Function: dist],
    Gamma: [Function: dist],
    Gaussian: [Function: dist],
    ImproperUniform: [Function: dist],
    IspNormal: [Function: dist],
    KDE: [Function: dist],
    Laplace: [Function: dist],
    LogisticNormal: [Function: dist],
    LogitNormal: [Function: dist],
    LogNormal: [Function: dist],
    Marginal: [Function: dist],
    Mixture: [Function: dist],
    Multinomial: [Function: dist],
    MultivariateBernoulli: [Function: dist],
    MultivariateGaussian: [Function: dist],
    Poisson: [Function: dist],
    RandomInteger: [Function: dist],
    SampleBasedMarginal: [Function: dist],
    TensorGaussian: [Function: dist],
    TensorLaplace: [Function: dist],
    Uniform: [Function: dist],
    makeBernoulli: [Function (anonymous)],
    makeBeta: [Function (anonymous)],
    makeBinomial: [Function (anonymous)],
    makeCategorical: [Function (anonymous)],
    makeCauchy: [Function (anonymous)],
    makeDelta: [Function (anonymous)],
    makeDiagCovGaussian: [Function (anonymous)],
    makeDirichlet: [Function (anonymous)],
    makeDiscrete: [Function (anonymous)],
    makeExponential: [Function (anonymous)],
    makeGamma: [Function (anonymous)],
    makeGaussian: [Function (anonymous)],
    makeImproperUniform: [Function (anonymous)],
    makeIspNormal: [Function (anonymous)],
    makeKDE: [Function (anonymous)],
    makeLaplace: [Function (anonymous)],
    makeLogisticNormal: [Function (anonymous)],
    makeLogitNormal: [Function (anonymous)],
    makeLogNormal: [Function (anonymous)],
    makeMarginal: [Function (anonymous)],
    makeMixture: [Function (anonymous)],
    makeMultinomial: [Function (anonymous)],
    makeMultivariateBernoulli: [Function (anonymous)],
    makeMultivariateGaussian: [Function (anonymous)],
    makePoisson: [Function (anonymous)],
    makeRandomInteger: [Function (anonymous)],
    makeSampleBasedMarginal: [Function (anonymous)],
    makeTensorGaussian: [Function (anonymous)],
    makeTensorLaplace: [Function (anonymous)],
    makeUniform: [Function (anonymous)]
  },
  numeric: {
    LOG_PI: 1.1447298858494002,
    LOG_2PI: 1.8378770664093453,
    sum: [Function: sum],
    _sum: [Function: _sum],
    product: [Function: product],
    fact: [Function: fact],
    lnfact: [Function: lnfact],
    squishToProbSimplex: [Function: squishToProbSimplex],
    logaddexp: [Function: logaddexp],
    _logsumexp: [Function: _logsumexp]
  },
  Enumerate: [Function: Enumerate],
  AsyncPF: [Function: asyncPF],
  MCMC: [Function: MCMC],
  IncrementalMH: [Function: imh],
  PMCMC: [Function: pmc],
  SMC: [Function: SMC],
  setProposalBoundary: [Function: setProposalBoundary],
  Rejection: [Function: rej],
  Optimize: [Function: Optimize],
  AIS: [Function: AIS],
  ForwardSample: [Function: ForwardSample],
  forward: [Function: forward],
  forwardGuide: [Function: forwardGuide],
  dreamSample: [Function: dreamSample],
  CheckSampleAfterFactor: [Function: CheckSampleAfterFactor],
  display: [Function: display],
  cache: [Function: cache],
  dp: { cache: [Function (anonymous)] },
  apply: [Function: apply],
  applyd: [Function: applyd],
  _Fn: { tag: [Function: tag] },
  _addr: { save: [Function: save] },
  zeros: [Function: zeros],
  ones: [Function: ones],
  mapData: [Function: mapData],
  guide: [Function: guide],
  getParams: [Function: getParams],
  getParamsId: [Function: getParamsId],
  param: [Function: param],
  setFreshParamsId: [Function: setFreshParamsId],
  setParams: [Function: setParams],
  setParamsId: [Function: setParamsId],
  serializeParams: [Function: serializeParams],
  deserializeParams: [Function: deserializeParams],
  webpplEval: [Function (anonymous)],
  argv: { _: [ 'code.wppl' ] },
  resumeTrampoline: [Function: runner]
}
process {
  version: 'v22.9.0',
  versions: {
    node: '22.9.0',
    acorn: '8.12.1',
    ada: '2.9.0',
    amaro: '0.1.8',
    ares: '1.33.1',
    brotli: '1.1.0',
    cjs_module_lexer: '1.4.1',
    cldr: '45.0',
    icu: '75.1',
    llhttp: '9.2.1',
    modules: '127',
    napi: '9',
    nbytes: '0.1.1',
    ncrypto: '0.0.1',
    nghttp2: '1.63.0',
    openssl: '3.3.2',
    simdjson: '3.10.0',
    simdutf: '5.5.0',
    sqlite: '3.46.1',
    tz: '2024a',
    undici: '6.19.8',
    unicode: '15.1',
    uv: '1.49.1',
    uvwasi: '0.0.21',
    v8: '12.4.254.21-node.19',
    zlib: '1.2.12'
  },
  arch: 'arm64',
  platform: 'darwin',
  release: {
    name: 'node',
    sourceUrl: 'https://nodejs.org/download/release/v22.9.0/node-v22.9.0.tar.gz',
    headersUrl: 'https://nodejs.org/download/release/v22.9.0/node-v22.9.0-headers.tar.gz'
  },
  _rawDebug: [Function: _rawDebug],
  moduleLoadList: [
    'Internal Binding builtins',
    'Internal Binding module_wrap',
    'Internal Binding errors',
    'NativeModule internal/assert',
    'Internal Binding util',
    'NativeModule internal/errors',
    'Internal Binding config',
    'Internal Binding timers',
    'Internal Binding async_wrap',
    'Internal Binding task_queue',
    'Internal Binding symbols',
    'NativeModule internal/async_hooks',
    'Internal Binding constants',
    'Internal Binding types',
    'Internal Binding options',
    'NativeModule internal/options',
    'Internal Binding string_decoder',
    'NativeModule internal/util',
    'NativeModule internal/util/types',
    'NativeModule internal/validators',
    'NativeModule internal/linkedlist',
    'NativeModule internal/priority_queue',
    'Internal Binding icu',
    'NativeModule internal/util/inspect',
    'NativeModule internal/constants',
    'Internal Binding trace_events',
    'NativeModule internal/util/debuglog',
    'Internal Binding async_context_frame',
    'NativeModule internal/async_context_frame',
    'NativeModule internal/timers',
    'NativeModule internal/events/abort_listener',
    'NativeModule events',
    'Internal Binding buffer',
    'NativeModule internal/buffer',
    'NativeModule buffer',
    'Internal Binding messaging',
    'NativeModule internal/worker/js_transferable',
    'Internal Binding process_methods',
    'NativeModule internal/process/per_thread',
    'Internal Binding credentials',
    'NativeModule internal/process/promises',
    'NativeModule internal/fixed_queue',
    'NativeModule async_hooks',
    'NativeModule internal/process/task_queues',
    'NativeModule timers',
    'NativeModule path',
    'NativeModule internal/querystring',
    'NativeModule querystring',
    'Internal Binding url',
    'NativeModule internal/url',
    'Internal Binding contextify',
    'NativeModule internal/vm',
    'NativeModule internal/process/execution',
    'NativeModule internal/process/warning',
    'NativeModule internal/source_map/source_map_cache',
    'Internal Binding fs',
    'Internal Binding blob',
    'Internal Binding encoding_binding',
    'NativeModule internal/encoding',
    'NativeModule internal/streams/utils',
    'NativeModule util',
    'NativeModule internal/webstreams/util',
    'NativeModule internal/webstreams/queuingstrategies',
    'NativeModule internal/blob',
    'NativeModule internal/fs/utils',
    'Internal Binding permission',
    'NativeModule internal/process/permission',
    'NativeModule fs',
    'Internal Binding modules',
    'NativeModule internal/modules/helpers',
    'NativeModule internal/console/constructor',
    'NativeModule internal/console/global',
    'NativeModule internal/util/inspector',
    'Internal Binding inspector',
    'NativeModule internal/webidl',
    'Internal Binding performance',
    'NativeModule internal/perf/utils',
    'NativeModule internal/event_target',
    'Internal Binding wasm_web_api',
    'Internal Binding mksnapshot',
    'NativeModule internal/v8/startup_snapshot',
    'NativeModule internal/process/signal',
    'NativeModule internal/idna',
    'NativeModule url',
    'NativeModule internal/modules/package_json_reader',
    'NativeModule diagnostics_channel',
    'NativeModule internal/modules/cjs/loader',
    'NativeModule internal/process/pre_execution',
    'NativeModule internal/modules/esm/utils',
    'NativeModule internal/inspector_async_hook',
    'Internal Binding worker',
    'NativeModule internal/modules/run_main',
    'NativeModule internal/net',
    'NativeModule internal/dns/utils',
    'Internal Binding pipe_wrap',
    'NativeModule internal/abort_controller',
    'NativeModule internal/streams/end-of-stream',
    'NativeModule internal/streams/destroy',
    'NativeModule internal/streams/legacy',
    'NativeModule internal/streams/add-abort-signal',
    ... 91 more items
  ],
  binding: [Function: binding],
  _linkedBinding: [Function: _linkedBinding],
  _events: [Object: null prototype] {
    newListener: [ [Function (anonymous)], [Function: startListeningIfSignal] ],
    removeListener: [ [Function (anonymous)], [Function: stopListeningIfSignal] ],
    warning: [Function: onWarning],
    SIGWINCH: [Function: refreshStderrOnSigWinch]
  },
  _eventsCount: 4,
  _maxListeners: undefined,
  domain: null,
  _exiting: [Getter/Setter],
  exitCode: [Getter/Setter],
  config: {
    target_defaults: {
      cflags: [],
      configurations: [Object],
      default_configuration: 'Release',
      defines: [Array],
      include_dirs: [Array],
      libraries: [Array]
    },
    variables: {
      arm_fpu: 'neon',
      asan: 0,
      clang: 1,
      coverage: false,
      dcheck_always_on: 0,
      debug_nghttp2: false,
      debug_node: false,
      enable_lto: true,
      enable_pgo_generate: false,
      enable_pgo_use: false,
      error_on_warn: false,
      force_dynamic_crt: 0,
      host_arch: 'arm64',
      icu_gyp_path: 'tools/icu/icu-system.gyp',
      icu_small: false,
      icu_ver_major: '75',
      libdir: 'lib',
      llvm_version: '16.0',
      napi_build_version: '9',
      node_builtin_shareable_builtins: [Array],
      node_byteorder: 'little',
      node_debug_lib: false,
      node_enable_d8: false,
      node_enable_v8_vtunejit: false,
      node_fipsinstall: false,
      node_install_corepack: false,
      node_install_npm: false,
      node_library_files: [Array],
      node_module_version: 127,
      node_no_browser_globals: false,
      node_prefix: '/opt/homebrew/Cellar/node/22.9.0_1',
      node_release_urlbase: '',
      node_shared: false,
      node_shared_ada: false,
      node_shared_brotli: true,
      node_shared_cares: true,
      node_shared_http_parser: false,
      node_shared_libuv: true,
      node_shared_nghttp2: true,
      node_shared_nghttp3: false,
      node_shared_ngtcp2: false,
      node_shared_openssl: true,
      node_shared_simdjson: false,
      node_shared_simdutf: false,
      node_shared_sqlite: false,
      node_shared_uvwasi: false,
      node_shared_zlib: true,
      node_tag: '',
      node_target_type: 'executable',
      node_use_amaro: true,
      node_use_bundled_v8: true,
      node_use_node_code_cache: true,
      node_use_node_snapshot: true,
      node_use_openssl: true,
      node_use_v8_platform: true,
      node_with_ltcg: false,
      node_without_node_options: false,
      node_write_snapshot_as_array_literals: false,
      openssl_is_fips: false,
      openssl_quic: false,
      ossfuzz: false,
      shlib_suffix: '127.dylib',
      single_executable_application: true,
      target_arch: 'arm64',
      ubsan: 0,
      use_prefix_to_find_headers: false,
      v8_enable_31bit_smis_on_64bit_arch: 0,
      v8_enable_extensible_ro_snapshot: 0,
      v8_enable_gdbjit: 0,
      v8_enable_hugepage: 0,
      v8_enable_i18n_support: 1,
      v8_enable_inspector: 1,
      v8_enable_javascript_promise_hooks: 1,
      v8_enable_lite_mode: 0,
      v8_enable_maglev: 0,
      v8_enable_object_print: 1,
      v8_enable_pointer_compression: 0,
      v8_enable_sandbox: 0,
      v8_enable_shared_ro_heap: 1,
      v8_enable_webassembly: 1,
      v8_optimized_debug: 1,
      v8_promise_internal_field_count: 1,
      v8_random_seed: 0,
      v8_trace_maps: 0,
      v8_use_siphash: 1,
      want_separate_host_toolset: 0
    }
  },
  dlopen: [Function: dlopen],
  uptime: [Function: uptime],
  _getActiveRequests: [Function: _getActiveRequests],
  _getActiveHandles: [Function: _getActiveHandles],
  getActiveResourcesInfo: [Function: getActiveResourcesInfo],
  reallyExit: [Function: reallyExit],
  _kill: [Function: _kill],
  loadEnvFile: [Function: loadEnvFile],
  cpuUsage: [Function: cpuUsage],
  resourceUsage: [Function: resourceUsage],
  memoryUsage: [Function: memoryUsage] { rss: [Function: rss] },
  constrainedMemory: [Function: constrainedMemory],
  availableMemory: [Function: availableMemory],
  kill: [Function: kill],
  exit: [Function: exit],
  finalization: [Getter/Setter],
  hrtime: [Function: hrtime] { bigint: [Function: hrtimeBigInt] },
  openStdin: [Function (anonymous)],
  getuid: [Function: getuid],
  geteuid: [Function: geteuid],
  getgid: [Function: getgid],
  getegid: [Function: getegid],
  getgroups: [Function: getgroups],
  allowedNodeEnvironmentFlags: [Getter/Setter],
  assert: [Function: deprecated],
  features: {
    inspector: true,
    debug: false,
    uv: true,
    ipv6: true,
    tls_alpn: true,
    tls_sni: true,
    tls_ocsp: true,
    tls: true,
    cached_builtins: [Getter]
  },
  _fatalException: [Function (anonymous)],
  setUncaughtExceptionCaptureCallback: [Function: setUncaughtExceptionCaptureCallback],
  hasUncaughtExceptionCaptureCallback: [Function: hasUncaughtExceptionCaptureCallback],
  emitWarning: [Function: emitWarning],
  nextTick: [Function: nextTick],
  _tickCallback: [Function: runNextTicks],
  sourceMapsEnabled: [Getter],
  setSourceMapsEnabled: [Function: setSourceMapsEnabled],
  getBuiltinModule: [Function: getBuiltinModule],
  _debugProcess: [Function: _debugProcess],
  _debugEnd: [Function: _debugEnd],
  _startProfilerIdleNotifier: [Function (anonymous)],
  _stopProfilerIdleNotifier: [Function (anonymous)],
  stdout: [Getter],
  stdin: [Getter],
  stderr: [Getter],
  abort: [Function: abort],
  umask: [Function: wrappedUmask],
  chdir: [Function (anonymous)],
  cwd: [Function: wrappedCwd],
  initgroups: [Function: initgroups],
  setgroups: [Function: setgroups],
  setegid: [Function (anonymous)],
  seteuid: [Function (anonymous)],
  setgid: [Function (anonymous)],
  setuid: [Function (anonymous)],
  env: {
    CAML_LD_LIBRARY_PATH: '/Users/huangboyi/.opam/default/lib/stublibs:/Users/huangboyi/.opam/default/lib/ocaml/stublibs:/Users/huangboyi/.opam/default/lib/ocaml',
    TERM_PROGRAM: 'vscode',
    SSL_CERT_FILE: '/Users/huangboyi/emsdk/python/3.9.2_64bit/lib/python3.9/site-packages/certifi/cacert.pem',
    TERM: 'xterm-256color',
    SHELL: '/bin/zsh',
    HOMEBREW_BOTTLE_DOMAIN: 'https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles',
    HOMEBREW_API_DOMAIN: 'https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api',
    HOMEBREW_REPOSITORY: '/opt/homebrew',
    TMPDIR: '/var/folders/t_/9rkxz6xn40q75nc_5vzm9h6r0000gn/T/',
    CONDA_SHLVL: '1',
    CONDA_PROMPT_MODIFIER: '(base) ',
    EMSDK: '/Users/huangboyi/emsdk',
    TERM_PROGRAM_VERSION: '1.94.1',
    GSETTINGS_SCHEMA_DIR_CONDA_BACKUP: '',
    NODE_OPTIONS: ' --require "/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/ms-vscode.js-debug/src/bootloader.js"  --inspect-publish-uid=http',
    RUDRA_HOME: '/Users/huangboyi/Projects/RSAT/Rudra',
    VCPKG_ROOT: '/Users/huangboyi/vcpkg',
    ZDOTDIR: '/Users/huangboyi',
    ORIGINAL_XDG_CURRENT_DESKTOP: 'undefined',
    MallocNanoZone: '0',
    OPAM_SWITCH_PREFIX: '/Users/huangboyi/.opam/default',
    PNPM_HOME: '/Users/huangboyi/Library/pnpm',
    OCAML_TOPLEVEL_PATH: '/Users/huangboyi/.opam/default/lib/toplevel',
    EMSDK_NODE: '/Users/huangboyi/emsdk/node/16.20.0_64bit/bin/node',
    USER: 'huangboyi',
    COMMAND_MODE: 'unix2003',
    CONDA_EXE: '/opt/homebrew/anaconda3/bin/conda',
    HOMEBREW_CORE_GIT_REMOTE: 'https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git',
    SAFEDROP_HOME: '/Users/huangboyi/Projects/RSAT/rust',
    SSH_AUTH_SOCK: '/private/tmp/com.apple.launchd.qFQM6t3eCS/Listeners',
    __CF_USER_TEXT_ENCODING: '0x1F5:0x19:0x34',
    HOMEBREW_PIP_INDEX_URL: 'https://pypi.tuna.tsinghua.edu.cn/simple',
    _CE_CONDA: '',
    CONDA_ROOT: '/opt/homebrew/anaconda3',
    PATH: '/Users/huangboyi/Library/pnpm:/opt/homebrew/anaconda3/bin:/opt/homebrew/anaconda3/condabin:/Users/huangboyi/.opam/default/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/Library/TeX/texbin:/Users/huangboyi/emsdk:/Users/huangboyi/emsdk/upstream/emscripten:/Users/huangboyi/emsdk/node/16.20.0_64bit/bin:/Users/huangboyi/.cargo/bin:/opt/homebrew/anaconda3/bin:/opt/homebrew/opt/llvm/bin',
    GSETTINGS_SCHEMA_DIR: '/opt/homebrew/anaconda3/share/glib-2.0/schemas',
    VSCODE_INSPECTOR_OPTIONS: '{"inspectorIpc":"/var/folders/t_/9rkxz6xn40q75nc_5vzm9h6r0000gn/T/node-cdp.62128-215da74b-0.sock","deferredMode":false,"waitForDebugger":"","execPath":"/opt/homebrew/bin/node","onlyEntrypoint":false,"autoAttachMode":"always","openerId":"a4d341f6065d0207434168d4"}',
    CONDA_PREFIX: '/opt/homebrew/anaconda3',
    USER_ZDOTDIR: '/Users/huangboyi',
    __CFBundleIdentifier: 'com.microsoft.VSCode',
    PWD: '/Users/huangboyi/ctf/2024/web-ppl-src',
    LANG: 'en_US.UTF-8',
    SAFEDROP_RUNNER_HOME: '/Users/huangboyi/Projects/RSAT/rudra_home',
    NODE_PATH: '/Users/huangboyi/Library/pnpm/global/5/.pnpm/webppl@0.9.15/node_modules/webppl/node_modules:/Users/huangboyi/Library/pnpm/global/5/.pnpm/webppl@0.9.15/node_modules:/Users/huangboyi/Library/pnpm/global/5/.pnpm/node_modules',
    EMSDK_PYTHON: '/Users/huangboyi/emsdk/python/3.9.2_64bit/bin/python3',
    VSCODE_GIT_ASKPASS_EXTRA_ARGS: '',
    XPC_FLAGS: '0x0',
    _CE_M: '',
    XPC_SERVICE_NAME: '0',
    VSCODE_INJECTION: '1',
    SHLVL: '1',
    HOME: '/Users/huangboyi',
    HOMEBREW_BREW_GIT_REMOTE: 'https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git',
    VSCODE_GIT_ASKPASS_MAIN: '/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass-main.js',
    HOMEBREW_PREFIX: '/opt/homebrew',
    CONDA_ALLOW_SOFTLINKS: 'false',
    CONDA_PYTHON_EXE: '/opt/homebrew/anaconda3/bin/python',
    LOGNAME: 'huangboyi',
    VSCODE_GIT_IPC_HANDLE: '/var/folders/t_/9rkxz6xn40q75nc_5vzm9h6r0000gn/T/vscode-git-208ae4a004.sock',
    CONDA_DEFAULT_ENV: 'base',
    INFOPATH: '/opt/homebrew/share/info:',
    HOMEBREW_CELLAR: '/opt/homebrew/Cellar',
    VSCODE_GIT_ASKPASS_NODE: '/Applications/Visual Studio Code.app/Contents/Frameworks/Code Helper (Plugin).app/Contents/MacOS/Code Helper (Plugin)',
    GIT_ASKPASS: '/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/dist/askpass.sh',
    RUDRA_RUNNER_HOME: '/Users/huangboyi/Projects/RSAT/rudra_home',
    COLORTERM: 'truecolor'
  },
  title: 'node',
  argv: [
    '/opt/homebrew/Cellar/node/22.9.0_1/bin/node',
    '/Users/huangboyi/Library/pnpm/global/5/node_modules/webppl/webppl',
    'code.wppl'
  ],
  execArgv: [ '--inspect' ],
  pid: 81317,
  ppid: 78111,
  execPath: '/opt/homebrew/Cellar/node/22.9.0_1/bin/node',
  debugPort: 9229,
  argv0: 'node',
  _preload_modules: [
    '/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/ms-vscode.js-debug/src/bootloader.js'
  ],
  report: [Getter],
  mainModule: {
    id: '.',
    path: '/Users/huangboyi/Library/pnpm/global/5/.pnpm/webppl@0.9.15/node_modules/webppl',
    exports: {},
    filename: '/Users/huangboyi/Library/pnpm/global/5/.pnpm/webppl@0.9.15/node_modules/webppl/webppl',
    loaded: false,
    children: [
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object],
      [Object], [Object]
    ],
    paths: [
      '/Users/huangboyi/Library/pnpm/global/5/.pnpm/webppl@0.9.15/node_modules/webppl/node_modules',
      '/Users/huangboyi/Library/pnpm/global/5/.pnpm/webppl@0.9.15/node_modules',
      '/Users/huangboyi/Library/pnpm/global/5/.pnpm/node_modules',
      '/Users/huangboyi/Library/pnpm/global/5/node_modules',
      '/Users/huangboyi/Library/pnpm/global/node_modules',
      '/Users/huangboyi/Library/pnpm/node_modules',
      '/Users/huangboyi/Library/node_modules',
      '/Users/huangboyi/node_modules',
      '/Users/node_modules',
      '/node_modules'
    ],
    [Symbol(kIsMainSymbol)]: true,
    [Symbol(kIsCachedByESMLoader)]: false,
    [Symbol(kIsExecuting)]: true
  },
  [Symbol(shapeMode)]: false,
  [Symbol(kCapture)]: false
}

[1mReferenceError: module is not defined[22m
    at code.wppl:3

[2m2| [22mconsole.log(process)
[2m3| [22m[1mconsole.log(module)[22m
   ------------^
[2m4| [22m

